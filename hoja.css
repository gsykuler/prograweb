/* Flexbox: Introducción */
/* En Flexbox, los elementos dentro de un contenedor se comportan como cajitas flexibles */

/* Propiedad flex-flow */
/* La propiedad flex-flow combina la dirección y el ajuste de envoltura de los elementos flexibles. La dirección puede ser row (fila) o column (columna), y el ajuste de envoltura puede ser nowrap (sin ajuste), wrap (ajuste) o wrap-reverse (ajuste en reversa). */

/* Propiedad justify-content */
/* La propiedad justify-content controla la alineación horizontal de los elementos dentro de un contenedor flex. Las opciones incluyen: flex-start (inicio), flex-end (final) y center (centrado). */

/* Espaciado entre elementos */
/* Las propiedades space-around y space-between se utilizan con justify-content para controlar el espaciado horizontal entre los elementos. Space-around distribuye el espacio alrededor de los elementos, mientras que space-between divide el espacio entre los elementos. */

/* Propiedades align-items y align-content */
/* La propiedad align-items alinea verticalmente los elementos dentro del contenedor. Las opciones incluyen: flex-start, flex-end y center. */
/* La propiedad align-content alinea y distribuye verticalmente múltiples líneas de elementos dentro del contenedor flex. */

/* Para profundizar en Flexbox, puedes practicar con juegos como Flexbox Froggy */

.container {
    display: flex;
    flex-flow: row wrap;
    justify-content: center;
    align-items: center;
    align-content: space-around;
  }

/* overflow: hidden */
/* La propiedad overflow: hidden se utiliza para ocultar el contenido que se desborda del contenedor. Esto significa que si el contenido dentro de un elemento es más grande que el tamaño definido del elemento en sí, el contenido adicional que se extienda más allá del límite del elemento no será visible en la página. */
/* Por ejemplo: */
.container {
    width: 200px;
    height: 200px;
    overflow: hidden; /* Oculta el contenido que se desborda del contenedor */
  }
  
  /* Centrar un div en otro div */
  /* Para centrar un div dentro de otro div, se utiliza Flexbox en CSS. */
  /* Aquí tienes un ejemplo con explicaciones: */
  .container {
    display: flex; /* Activa el modelo de diseño flexible de Flexbox */
    justify-content: center; /* Centra horizontalmente los elementos secundarios */
    align-items: center; /* Centra verticalmente los elementos secundarios */
    height: 300px; /* Altura fija para el contenedor */
    width: 300px; /* Anchura fija para el contenedor */
    border: 2px solid black; /* Borde para visualizar el contenedor */
  }
  
  .inner-div {
    width: 100px; /* Anchura del div interno */
    height: 100px; /* Altura del div interno */
    background-color: lightblue; /* Color de fondo para visualizar el div interno */
  }
  
  /* En el HTML: */
  /* <div class="container"> <!-- Contenedor exterior -->
  /*   <div class="inner-div"> <!-- Div interno -->
  /*     Contenido
  /*   </div>
  /* </div> */
  
  /* Propiedades de Grid */
  /* La especificación de Grid permite dividir el div en secciones. */
  /* display: grid, define la cantidad de columnas que tiene el div. */
  /* De Grid hay rows (elementos divididos en filas) y columns. */
  /* Column gap, row gap y gap son la separación entre columnas y filas. */
  /* Grid container es el contenedor de la cuadrícula. */
  
/* grid item, como quiero que se comporte cada elemento, de que fila o columna a que fila o columna va */

/* Grid item: cómo quiero que se comporte cada elemento, de qué fila o columna a qué fila o columna va */

/* Supongamos que tenemos un grid container con 3 filas y 3 columnas */

.grid-container {
    display: grid;
    grid-template-rows: 100px 100px 100px; /* Tres filas de 100px de altura cada una */
    grid-template-columns: 100px 100px 100px; /* Tres columnas de 100px de ancho cada una */
    gap: 10px; /* Espacio entre filas y columnas */
  }
  
  /* Ahora, vamos a colocar elementos en nuestro grid */
  
  .item1 {
    grid-row: 1 / 2; /* Este elemento ocupa desde la fila 1 hasta la fila 2 */
    grid-column: 1 / 3; /* Este elemento ocupa desde la columna 1 hasta la columna 3 */
  }
  
  .item2 {
    grid-row: 2 / 3; /* Este elemento ocupa desde la fila 2 hasta la fila 3 */
    grid-column: 2 / 4; /* Este elemento ocupa desde la columna 2 hasta la columna 4 */
  }
  
  .item3 {
    grid-row: 3; /* Este elemento ocupa solo la fila 3 */
    grid-column: 1 / span 2; /* Este elemento ocupa desde la columna 1 hasta dos columnas más */
  }
  
  /* <div class="grid-container"> <!-- Contenedor de la cuadrícula -->
  <div class="item1">Item 1</div> <!-- Elemento 1 -->
  <div class="item2">Item 2</div> <!-- Elemento 2 -->
  <div class="item3">Item 3</div> <!-- Elemento 3 -->
 </div> */

 /* https://grid.layoutit.com/ */
  

 /* queries, al navegador, cuan alto y ancho es la pantalla, portrait y landscape */
 /* media queries, all, print (en papel), screen (tamaño de pantalla), para celular y para pantalla los tamaños */
 /* xs celus viejos, s celus normales, m pantallas y asi sucesivamente */
 /* mobile first, la mayoría de la navegación es mediante celulares */

 /* las reglas se manejan entre maximos y mínimos de anchos por ejemplo */
 /* de o a 480 para telefono
 max width y min widht0 */

 /* psuedo-classes, cuando le pasas el mouse por arriba cambia de color (active o hover), reglas para distintos idiomas

 pseudo-elementos, permiten aplicar reglas de css, a partes de una etiqueta, first letter, marker es cambiar el punteo y selection como se marca con el mouse */

 /* before y after */